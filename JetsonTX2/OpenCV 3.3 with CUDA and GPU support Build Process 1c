sudo dpkg -i cuda-repo-l4t-8-0-local_8.0.84-1_arm64.deb

sudo sed -i.bak 's/\(^deb.*main restricted\)\s*$/\1 universe multiverse/g' /etc/apt/sources.list
sudo sed -i.bak 's/\(^deb.*main restricted universe\)\s*$/\1 multiverse/g' /etc/apt/sources.list

#30 minutes
sudo apt-get update

sudo apt-get install cuda-toolkit-8.0 libgomp1 libfreeimage-dev libopenmpi-dev openmpi-bin

grep -q "export PATH=.*/usr/local/cuda-8.0/bin" ~/.bashrc || echo "export PATH=/usr/local/cuda-8.0/bin:$PATH">>~/.bashrc

grep -q "export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64" ~/.bashrc || echo "export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH" >> ~/.bashrc

export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH

#https://github.com/opencv/opencv/issues/5205
#https://devtalk.nvidia.com/default/topic/1007290/building-opencv-with-opengl-support-/
git apply ./jetsonFixOpenCVOpenGL

#MrGibbes - github.com/mrgibbes/buildOpenCVTX2 Add "-DWITH_OPENGL=ON \" to buildOpenCV.sh
./buildOpenCV.sh
cd $HOME/opencv/build
make
sudo make install

#Install Pangolin:
git clone https://github.com/mrgibbes/J5/Pangolin
cd Pangolin
mkdir build
cd build
cmake ..
cmake --build .

#Adjust power mode to turn off Denver cores or the compile will fail.
sudo nvpmodel -m 3

#Compile OSD_SLAM_GPU
cd ORB_SLAM2
chmod +x build.sh
./build.sh

#Adjust power mode to turn ON Denver cores (better performance of single threded apps)
sudo nvpmodel -m 0




